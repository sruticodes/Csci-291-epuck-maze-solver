#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/light_sensor.h>
#include <webots/led.h>
#include <stdio.h>

#define TIME_STEP 32
#define MAX_SPEED 6.28
#define NUM_LIGHT_SENSORS 8

WbDeviceTag left_motor, right_motor;
WbDeviceTag ps[8];
WbDeviceTag ls[8];
WbDeviceTag led;

void initialize_devices() {
  left_motor = wb_robot_get_device("left wheel motor");
  right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);

  for (int i = 0; i < 8; i++) {
    char ps_name[4];
    sprintf(ps_name, "ps%d", i);
    ps[i] = wb_robot_get_device(ps_name);
    wb_distance_sensor_enable(ps[i], TIME_STEP);
  }

  for (int i = 0; i < NUM_LIGHT_SENSORS; i++) {
    char ls_name[4];
    sprintf(ls_name, "ls%d", i);
    ls[i] = wb_robot_get_device(ls_name);
    wb_light_sensor_enable(ls[i], TIME_STEP);
  }

  led = wb_robot_get_device("led0");  // Assuming the LED device is "led0"
}

double get_average_light_intensity() {
  double total_intensity = 0.0;
  for (int i = 0; i < NUM_LIGHT_SENSORS; i++) {
    total_intensity += wb_light_sensor_get_value(ls[i]);
  }
  return total_intensity / NUM_LIGHT_SENSORS;
}

void update_led_based_on_state(bool front_obstacle, double current_average_intensity) {
  if (front_obstacle) {
    wb_led_set(led, 1);  // Red LED if obstacle is in front
  } else if (current_average_intensity < 2000.0) {
    wb_led_set(led, 2);  // Blue LED for low light condition
  } else {
    wb_led_set(led, 3);  // Green LED if moving normally
  }
}

void process_sensors_and_control() {
  int ps_values[8];
  for (int i = 0; i < 8; i++) {
    ps_values[i] = (int)wb_distance_sensor_get_value(ps[i]);
  }

  double current_average_intensity = get_average_light_intensity();

  int left_speed = (int)(MAX_SPEED);
  int right_speed = (int)(MAX_SPEED);

  bool front_obstacle = ps_values[0] > 80.0 || ps_values[7] > 80.0;
  bool side_left = ps_values[5] > 80.0;
  bool side_right = ps_values[2] > 80.0;

  if (current_average_intensity < 2000.0) {
    left_speed = (int)(MAX_SPEED);
    right_speed = (int)(MAX_SPEED);
  } else {
    left_speed = (int)(MAX_SPEED * 0.5);
    right_speed = (int)(MAX_SPEED * 0.5);
  }

  if (front_obstacle) {
    if (side_left && side_right) {
      left_speed = (int)(-0.5 * MAX_SPEED);
      right_speed = (int)(-0.5 * MAX_SPEED);
    } else if (side_left) {
      left_speed = (int)(MAX_SPEED);
      right_speed = (int)(0.1 * MAX_SPEED);
    } else if (side_right) {
      left_speed = (int)(0.1 * MAX_SPEED);
      right_speed = (int)(MAX_SPEED);
    } else {
      left_speed = (int)(MAX_SPEED);
      right_speed = (int)(-0.1 * MAX_SPEED);
    }
  } else {
    if (side_left && !side_right) {
      left_speed = (int)(0.1 * MAX_SPEED);
      right_speed = (int)(MAX_SPEED);
    } else if (!side_left && !side_right) {
      left_speed = (int)(0.5 * MAX_SPEED);
      right_speed = (int)(0.5 * MAX_SPEED);
    } else if (!side_left && side_right) {
      left_speed = (int)(0.1 * MAX_SPEED);
      right_speed = (int)(MAX_SPEED);
    }
  }

  wb_motor_set_velocity(left_motor, left_speed);
  wb_motor_set_velocity(right_motor, right_speed);

  update_led_based_on_state(front_obstacle, current_average_intensity);  // Update LED state
}

int main() {
  wb_robot_init();
  initialize_devices();

  while (wb_robot_step(TIME_STEP) != -1) {
    process_sensors_and_control();
  }

  wb_robot_cleanup();
  return 0;
}

